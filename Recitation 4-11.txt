Project 2 Recitation 4-11


Lex File Creation (.l file)

        %{
            Can put C code here

            #include "y.tab.h"

        %}


    %%

    Put tokens here
    Each token returns  something

    "+"         {yylval.value_change = 1;return VALUE_CHANGE}
    "-"         {yylval.value_change = -1; return VALUE_CHANGE}
    ">"         {yylval.index_change = 1; return INDEX_CHANGE}
    "<"         {yylval.index_change = -1; return INDEX_CHANGE}
    "."         return INPUT;
    ","         return OUTPUT;
    "["         return LOOP_START;
    "]"         return LOOP_END;
    


    %%


Yacc File Creation

    %{
    #include <stdio.h>
    #include "lex.yy.c"
    #define STACK_SIZE 65535
    unsigned short stack[STACK_SIZE];
    unsigned short stack_index;
    unsigned short current_index = 0;
    %}
    
    %union
    {
        unsigned short index_change;
        int value_change;
    }

    %token <value_change>VALUE_CHANGE 
    %token <index_change>INDEX_CHANGE INPUT OUTPUT LOOP_START
    %token LOOP_END
    
    %type <index_change>index_change_command
    %type <value_change>value_change_command
    
    %%
    Productions go here
    
    bf : /*epsilon*/
    | bf commands
    
    ;
    index_change_command : INDEX_CHANGE {$$ = $1;}
                            | index-change_command INDEX_CHANGE { $$ = $1 + $2;}
    ;

    value_change_command: VALUE_CHANGE { $$ = $1}
                            | value_change_command VALUE_CHANGE {$$ = $1 + $2;}
    ;
    
    commands : /*epsilon*/
            | commands index_change_command{current_index += $2;}
            | commands value_change_command{printf("memory[%hu] += %d", current_index, $2);}
            | commands INPUT { printf("scanf(\"%%d\", memory, + %hu);"), current_index;}
            | commands OUTPUT { printf("printf(\"%%d\", memory, + %hu);"), current_index;}
            | commands loop
            
    loop: loop_start_command command loop_end_command
    ;
    
    loop_start_command: LOOP_START{
        stack[stack_index] = current_index;
        stack_index += 1;
        printf("while(memory[%hu]){\n", current_index});
    }
    
    ;
    
    loop_end_command: LOOP_END{
        stack_index -= 1;
        current_index = stack[stack_index];
        printf("}\n");
    
    }
    ;
    
    
            
    
    %%
    
prints an error message    
int yyerror(char* s)
{
    printf("error: %s at %d", s,yylineno);
}


int yywrap()
{
    return 1;
}
    
int main()
{
    //calls the yacc parser
    yyparse();
    return 0;
}




lex bf.l



We are going to access the members of the tokentype union (num and str)
and store shit in there.
